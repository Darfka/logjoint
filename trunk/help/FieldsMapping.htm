<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title></title>
		<style type="text/css">
			table {background: gray}
			th, td {background: white}
		</style>
	</head>
	<body>
        <p>General information about fields mapping is <a href="HowRegexParsingWorks.htm#FieldsMapping">here</a>.</p>
        <h2>Code types</h2>
        <p>
            You provide peices of C# code that convert input regexp captures to parts of logical log messages. 
            Fields mapping code can use any valid C# contructs to do the conversion.
            In the scope of the code there exist variables named
            as captures you specified in your head and body regexps. These variables have type <code>StringSlice</code>.
            Use <a href="FunctionsReference.htm">helper functions</a> to work with the variables. Do <code>captureName.ToString()</code>
            to get standard .Net <code>System.String</code> object for the capture. Try to make do with without conversion to
            <code>System.String</code> as this conversion is inefficient.
        </p>
        <p>
            The code can be of two types: Expression or Function Body.</p>
        <p>
            Expresion is like a formula that combines input captures. Examples of expressions
        </p>
        <table>
            <tr>
                <th>Expression</th>
                <th>Description</th>
            </tr>
            <tr>
                <td><code>thread</code></td>
                <td>Simply returns "thread" capture as is.</td>
            </tr>
            <tr>
                <td><code>TRIM(thread)</code></td>
                <td>Returns "thread" capture with leading and trailing spaces removed.</td>
            </tr>
            <tr>
                <td><code>TO_DATETIME(time, "yyyy-MM-dd HH:mm:ss")</code></td>
                <td>Takes the capture named "time" and passes it to function TO_DATETIME for parsing. </td>
            </tr>
            <tr>
                <td><code>logicalThread.Length > 0 ? logicalThread : threadId</code></td>
                <td>Ternary operator expression that selects one of two captures.</td>
            </tr>
        </table>
        <p>
            Function Body is more powerful. It can contain whatever you could put to a C# function: switch contructs, loops, try/catch, etc. Examples:
        </p>
        <table>
            <tr>
                <th>Function body</th>
                <th>Description</th>
            </tr>
            <tr>
                <td><pre>switch (level)
{
case "WARN": return Severity.Warning;
case "ERROR": 
case "FATAL": return Severity.Error;
default: return Severity.Info;
}</pre></td>
                <td>Maps value of capture "level" to log message severity. It's a function body for field Severity.</td>
            </tr>
        </table>
	</body>
</html>